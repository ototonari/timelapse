{"ast":null,"code":"import _slicedToArray from \"/Volumes/ST-side-SSD/tsubasa/engineer/playground/typescript/timelapse-app/node_modules/timelapse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Volumes/ST-side-SSD/tsubasa/engineer/playground/typescript/timelapse-app/node_modules/timelapse/src/container/Timelapse.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { TimelapseFC } from \"../component/Timelapse\";\nimport ImagePreloader from \"../component/ImagePreloader\";\nvar LoadState;\n\n(function (LoadState) {\n  LoadState[LoadState[\"None\"] = 0] = \"None\";\n  LoadState[LoadState[\"Loading\"] = 1] = \"Loading\";\n  LoadState[LoadState[\"Loaded\"] = 2] = \"Loaded\";\n})(LoadState || (LoadState = {}));\n\nexport const sampleImageCreator = maxIndex => {\n  const assetsPath = 'assets/sample/';\n  const extension = '.jpg';\n\n  function zeroPadding(num, length) {\n    return ('0000000000' + num).slice(-length);\n  }\n\n  const size = new Array(maxIndex).fill(0);\n  const images = size.map((n, index) => {\n    const No = zeroPadding(index + 1, 4);\n    const image = {\n      src: assetsPath + 'img' + No + extension,\n      alt: 'sample'\n    };\n    return image;\n  });\n  console.log(images);\n  return images;\n};\nexport const TimelapseApp = props => {\n  const _useState = useState(LoadState.None),\n        _useState2 = _slicedToArray(_useState, 2),\n        loadState = _useState2[0],\n        setLoadState = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        images = _useState4[0],\n        setImages = _useState4[1];\n\n  useEffect(() => {\n    switch (loadState) {\n      case LoadState.None:\n        // sampleImagesFromUnsplash(\"nature\").then((images) => {\n        //   setLoadState(LoadState.Loading)\n        //   setImages(images)\n        // })\n        setLoadState(LoadState.Loading);\n        setImages(sampleImageCreator(100));\n        break;\n\n      case LoadState.Loading:\n        setTimeout(() => setLoadState(LoadState.Loaded), 3000);\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  const component = loadState => {\n    switch (loadState) {\n      case LoadState.None:\n        return \"Loading Images\";\n\n      case LoadState.Loading:\n        if (images === null) return null;\n        return React.createElement(React.Fragment, null, React.createElement(ImagePreloader, {\n          images: images,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }), \"Loading Images...\");\n\n      case LoadState.Loaded:\n        if (images === null) return \"images is null\";\n        return React.createElement(\"div\", {\n          className: \"App\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67\n          },\n          __self: this\n        }, React.createElement(TimelapseFC, {\n          images: images,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }));\n    }\n  };\n\n  return React.createElement(React.Fragment, null, component(loadState));\n};","map":{"version":3,"sources":["/Volumes/ST-side-SSD/tsubasa/engineer/playground/typescript/timelapse-app/node_modules/timelapse/src/container/Timelapse.tsx"],"names":["React","useState","useEffect","TimelapseFC","ImagePreloader","LoadState","sampleImageCreator","maxIndex","assetsPath","extension","zeroPadding","num","length","slice","size","Array","fill","images","map","n","index","No","image","src","alt","console","log","TimelapseApp","props","None","loadState","setLoadState","setImages","Loading","setTimeout","Loaded","component"],"mappings":";;AAAA,OAAOA,KAAP,IAAoBC,QAApB,EAA8BC,SAA9B,QAA+C,OAA/C;AACA,SAASC,WAAT,QAAmC,wBAAnC;AACA,OAAOC,cAAP,MAA2B,6BAA3B;IAGKC,S;;WAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAML,OAAO,MAAMC,kBAAkB,GAAIC,QAAD,IAAsB;AACtD,QAAMC,UAAU,GAAG,gBAAnB;AACA,QAAMC,SAAS,GAAG,MAAlB;;AACA,WAASC,WAAT,CAAqBC,GAArB,EAAkCC,MAAlC,EAAiD;AAC/C,WAAO,CAAC,eAAeD,GAAhB,EAAqBE,KAArB,CAA2B,CAACD,MAA5B,CAAP;AACD;;AACD,QAAME,IAAI,GAAG,IAAIC,KAAJ,CAAUR,QAAV,EAAoBS,IAApB,CAAyB,CAAzB,CAAb;AACA,QAAMC,MAAe,GAAGH,IAAI,CAACI,GAAL,CAAS,CAACC,CAAD,EAAIC,KAAJ,KAAc;AAC7C,UAAMC,EAAE,GAAGX,WAAW,CAACU,KAAK,GAAG,CAAT,EAAY,CAAZ,CAAtB;AACA,UAAME,KAAY,GAAG;AACnBC,MAAAA,GAAG,EAAEf,UAAU,GAAG,KAAb,GAAqBa,EAArB,GAA0BZ,SADZ;AAEnBe,MAAAA,GAAG,EAAE;AAFc,KAArB;AAIA,WAAOF,KAAP;AACD,GAPuB,CAAxB;AAQAG,EAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACA,SAAOA,MAAP;AACD,CAjBM;AAmBP,OAAO,MAAMU,YAAgB,GAAIC,KAAD,IAAW;AAAA,oBACP3B,QAAQ,CAAYI,SAAS,CAACwB,IAAtB,CADD;AAAA;AAAA,QAClCC,SADkC;AAAA,QACvBC,YADuB;;AAAA,qBAEb9B,QAAQ,CAAiB,IAAjB,CAFK;AAAA;AAAA,QAElCgB,MAFkC;AAAA,QAE1Be,SAF0B;;AAGzC9B,EAAAA,SAAS,CAAC,MAAM;AACd,YAAQ4B,SAAR;AACE,WAAKzB,SAAS,CAACwB,IAAf;AACE;AACA;AACA;AACA;AACAE,QAAAA,YAAY,CAAC1B,SAAS,CAAC4B,OAAX,CAAZ;AACAD,QAAAA,SAAS,CAAC1B,kBAAkB,CAAC,GAAD,CAAnB,CAAT;AACA;;AACF,WAAKD,SAAS,CAAC4B,OAAf;AACEC,QAAAA,UAAU,CAAC,MAAMH,YAAY,CAAC1B,SAAS,CAAC8B,MAAX,CAAnB,EAAuC,IAAvC,CAAV;AACA;;AACF;AACE;AAbJ;AAeD,GAhBQ,CAAT;;AAkBA,QAAMC,SAAS,GAAIN,SAAD,IAA0B;AAC1C,YAAOA,SAAP;AACE,WAAKzB,SAAS,CAACwB,IAAf;AACE,eAAO,gBAAP;;AACF,WAAKxB,SAAS,CAAC4B,OAAf;AACE,YAAIhB,MAAM,KAAK,IAAf,EAAqB,OAAO,IAAP;AACrB,eACE,0CACE,oBAAC,cAAD;AAAgB,UAAA,MAAM,EAAEA,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,sBADF;;AAMF,WAAKZ,SAAS,CAAC8B,MAAf;AACE,YAAIlB,MAAM,KAAK,IAAf,EAAqB,OAAO,gBAAP;AACrB,eACE;AAAK,UAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,WAAD;AAAa,UAAA,MAAM,EAAEA,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAbJ;AAmBD,GApBD;;AAqBA,SACE,0CACImB,SAAS,CAACN,SAAD,CADb,CADF;AAKD,CA/CM","sourcesContent":["import React, { FC, useState, useEffect } from 'react';\nimport { TimelapseFC, Image } from \"../component/Timelapse\";\nimport ImagePreloader from \"../component/ImagePreloader\";\nimport { sampleImagesFromUnsplash } from \"../lib/unsplash\";\n\nenum LoadState {\n  None = 0,\n  Loading = 1,\n  Loaded = 2\n}\n\nexport const sampleImageCreator = (maxIndex: number) => {\n  const assetsPath = 'assets/sample/'\n  const extension = '.jpg'\n  function zeroPadding(num: number, length: number){\n    return ('0000000000' + num).slice(-length);\n  }\n  const size = new Array(maxIndex).fill(0)\n  const images: Image[] = size.map((n, index) => {\n    const No = zeroPadding(index + 1, 4)\n    const image: Image = {\n      src: assetsPath + 'img' + No + extension,\n      alt: 'sample'\n    }\n    return image\n  })\n  console.log(images)\n  return images\n}\n\nexport const TimelapseApp: FC = (props) => {\n  const [loadState, setLoadState] = useState<LoadState>(LoadState.None)\n  const [images, setImages] = useState<null | Image[]>(null)\n  useEffect(() => {\n    switch (loadState) {\n      case LoadState.None:\n        // sampleImagesFromUnsplash(\"nature\").then((images) => {\n        //   setLoadState(LoadState.Loading)\n        //   setImages(images)\n        // })\n        setLoadState(LoadState.Loading)\n        setImages(sampleImageCreator(100))\n        break\n      case LoadState.Loading:\n        setTimeout(() => setLoadState(LoadState.Loaded), 3000)\n        break\n      default:\n        break\n      }\n  })\n\n  const component = (loadState: LoadState) => {\n    switch(loadState) {\n      case LoadState.None:\n        return \"Loading Images\"\n      case LoadState.Loading:\n        if (images === null) return null\n        return (\n          <>\n            <ImagePreloader images={images} />\n            Loading Images...\n          </>\n        )\n      case LoadState.Loaded:\n        if (images === null) return \"images is null\"\n        return (\n          <div className=\"App\">\n            <TimelapseFC images={images} />\n          </div>    \n        )\n    }\n  }\n  return (\n    <>\n      { component(loadState) }\n    </>\n  )\n}"]},"metadata":{},"sourceType":"module"}