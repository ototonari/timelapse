{"ast":null,"code":"var _jsxFileName = \"/Volumes/ST-side-SSD/tsubasa/engineer/playground/typescript/timelapse-app/node_modules/timelapse/src/component/Canvas.tsx\";\nimport React, { Component } from 'react';\nimport { ee } from \"../lib/Events\";\nvar LoadStatus;\n\n(function (LoadStatus) {\n  LoadStatus[LoadStatus[\"Loading\"] = 0] = \"Loading\";\n  LoadStatus[LoadStatus[\"Loaded\"] = 1] = \"Loaded\";\n})(LoadStatus || (LoadStatus = {}));\n\nvar EventEmittStatus;\n\n(function (EventEmittStatus) {\n  EventEmittStatus[\"ALLREADYLOAD\"] = \"ALL_READY_LOAD\";\n  EventEmittStatus[\"START\"] = \"TIMELAPSE_START\";\n  EventEmittStatus[\"STOP\"] = \"TIMELAPSE_STOP\";\n})(EventEmittStatus || (EventEmittStatus = {}));\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.images = null;\n    this.canvas = React.createRef();\n    this.intervalId = null;\n\n    this.imagePreLoader = (srcs, cb) => {\n      const images = srcs.map((src, index) => {\n        const img = new Image();\n        img.src = src;\n        img.onload = cb(index);\n        return img;\n      });\n      return images;\n    };\n\n    this.enableTimelapse = () => {\n      this.intervalId = setInterval(() => {\n        this.setState(prevState => ({\n          renderingIndex: prevState.renderingIndex < prevState.loadStatusList.length - 1 ? prevState.renderingIndex + 1 : 0\n        }));\n      }, 60);\n    };\n\n    this.disableTimelapse = () => {\n      if (this.intervalId) clearInterval(this.intervalId);\n    };\n\n    this.drawCanvas = index => {\n      if (this.images === null) return;\n      const img = this.images[index];\n      if (img === null) return;\n      const canvas = this.canvas.current;\n      if (canvas === null) return;\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx === null) return;\n      const _this$props = this.props,\n            width = _this$props.width,\n            height = _this$props.height;\n      ctx.drawImage(img, 0, 0, width, height);\n    };\n\n    this.state = {\n      loadStatusList: this.props.images.map(() => LoadStatus.Loading),\n      renderingIndex: 0 // イメージのローディングが終わったら発火する\n\n    };\n    ee.once(EventEmittStatus.ALLREADYLOAD, this.props.preloadedCallback); // タイムラプス始まる\n\n    ee.on(EventEmittStatus.START, this.enableTimelapse); // タイムラプス終わる\n\n    ee.on(EventEmittStatus.STOP, this.disableTimelapse);\n  }\n\n  componentDidMount() {\n    const images = this.props.images;\n    const srcs = images.map(image => image.src);\n    this.images = this.imagePreLoader(srcs, i => {\n      this.setState(prevState => {\n        const newLoadStatusList = prevState.loadStatusList.concat();\n        newLoadStatusList[i] = LoadStatus.Loaded; // イメージのローディングが終わったことを知らせるイベント\n\n        const allReadyLoad = newLoadStatusList.every(loadStatus => loadStatus === LoadStatus.Loaded);\n\n        if (allReadyLoad) {\n          ee.emit(EventEmittStatus.ALLREADYLOAD, this.props.preloadedCallback);\n        }\n\n        return {\n          loadStatusList: newLoadStatusList\n        };\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const timelapseHandle = prevProps.timelapseHandle;\n\n    switch (timelapseHandle) {\n      case true:\n        ee.emit(EventEmittStatus.START);\n        break;\n\n      case false:\n        ee.emit(EventEmittStatus.STOP);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  render() {\n    const renderingIndex = this.state.renderingIndex;\n    const _this$props2 = this.props,\n          width = _this$props2.width,\n          height = _this$props2.height;\n    this.drawCanvas(renderingIndex);\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: this.canvas,\n      width: width,\n      height: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/Volumes/ST-side-SSD/tsubasa/engineer/playground/typescript/timelapse-app/node_modules/timelapse/src/component/Canvas.tsx"],"names":["React","Component","ee","LoadStatus","EventEmittStatus","Canvas","constructor","props","images","canvas","createRef","intervalId","imagePreLoader","srcs","cb","map","src","index","img","Image","onload","enableTimelapse","setInterval","setState","prevState","renderingIndex","loadStatusList","length","disableTimelapse","clearInterval","drawCanvas","current","ctx","getContext","width","height","drawImage","state","Loading","once","ALLREADYLOAD","preloadedCallback","on","START","STOP","componentDidMount","image","i","newLoadStatusList","concat","Loaded","allReadyLoad","every","loadStatus","emit","componentDidUpdate","prevProps","timelapseHandle","render"],"mappings":"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","sourcesContent":["import React, { Component, RefObject } from 'react';\nimport { ee } from \"../lib/Events\";\n\ninterface ImageProps {\n  src: string,\n  alt: string\n}\n\ninterface CanvasProps {\n  width: number,\n  height: number,\n  images: ImageProps[],\n  preloadedCallback: () => void,\n  timelapseHandle: boolean | null\n}\n\ninterface CanvasStatus {\n  loadStatusList: LoadStatus[],\n  renderingIndex: number\n}\n\nenum LoadStatus {\n  Loading = 0,\n  Loaded = 1\n}\n\nenum EventEmittStatus {\n  ALLREADYLOAD = \"ALL_READY_LOAD\",\n  START = \"TIMELAPSE_START\",\n  STOP = \"TIMELAPSE_STOP\"\n}\n\nclass Canvas extends Component<CanvasProps, CanvasStatus> {\n  images: HTMLImageElement[] | null = null\n  canvas: RefObject<HTMLCanvasElement> = React.createRef()\n  intervalId: NodeJS.Timeout | null = null\n  constructor(props: CanvasProps) {\n    super(props)\n    this.state = {\n      loadStatusList: this.props.images.map(() => LoadStatus.Loading),\n      renderingIndex: 0\n    }\n    // イメージのローディングが終わったら発火する\n    ee.once(EventEmittStatus.ALLREADYLOAD, this.props.preloadedCallback)\n    // タイムラプス始まる\n    ee.on(EventEmittStatus.START, this.enableTimelapse)\n    // タイムラプス終わる\n    ee.on(EventEmittStatus.STOP, this.disableTimelapse)\n  }\n\n  componentDidMount() {\n    const { images } = this.props\n    const srcs = images.map((image: any) => image.src)\n    this.images = this.imagePreLoader(srcs, (i: number) => {\n      this.setState(prevState => {\n        const newLoadStatusList = prevState.loadStatusList.concat()\n        newLoadStatusList[i] = LoadStatus.Loaded\n\n        // イメージのローディングが終わったことを知らせるイベント\n        const allReadyLoad = newLoadStatusList.every((loadStatus) => (loadStatus === LoadStatus.Loaded))\n        if (allReadyLoad) {\n          ee.emit(EventEmittStatus.ALLREADYLOAD, this.props.preloadedCallback)\n        }\n\n        return {\n          loadStatusList: newLoadStatusList\n        }\n      })\n    })\n  }\n\n  componentDidUpdate(prevProps: CanvasProps) {\n    const { timelapseHandle } = prevProps\n    switch (timelapseHandle) {\n      case true:\n        ee.emit(EventEmittStatus.START)\n        break\n      case false:\n        ee.emit(EventEmittStatus.STOP)\n        break\n      default:\n        break\n    }\n  }\n\n  imagePreLoader = (srcs: string[], cb: any) => {\n    const images = srcs.map((src, index) => {\n      const img = new Image()\n      img.src = src\n      img.onload = cb(index)\n      return img\n    })\n    return images\n  }\n  \n  enableTimelapse = () => {\n    this.intervalId = setInterval(() => {\n      this.setState(prevState => ({\n        renderingIndex: (prevState.renderingIndex < prevState.loadStatusList.length - 1) ? prevState.renderingIndex + 1 : 0\n      }))\n    }, 60)\n  }\n\n  disableTimelapse = () => {\n    if (this.intervalId) clearInterval(this.intervalId)\n  }\n\n  drawCanvas = (index: number) => {\n    if (this.images === null) return\n    const img = this.images[index]\n    if (img === null) return \n    const canvas = this.canvas.current\n    if (canvas === null) return \n    const ctx = canvas.getContext(\"2d\")\n    if (ctx === null) return\n    const { width, height } = this.props\n    ctx.drawImage(img, 0, 0, width, height)\n  }\n\n  render() {\n    const { renderingIndex } = this.state\n    const {  width, height } = this.props\n    this.drawCanvas(renderingIndex)\n\n    return(\n      <>\n        <div>\n          <canvas ref={this.canvas} width={width} height={height} />\n        </div>\n      </>\n    )\n  }\n}\nexport default Canvas"]},"metadata":{},"sourceType":"module"}