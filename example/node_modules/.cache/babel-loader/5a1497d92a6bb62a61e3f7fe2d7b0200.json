{"ast":null,"code":"var _jsxFileName = \"/Volumes/ST-side-SSD/tsubasa/engineer/playground/typescript/timelapse-app/node_modules/timelapse/src/component/Canvas.tsx\";\nimport React, { Component } from 'react';\nvar LoadStatus;\n\n(function (LoadStatus) {\n  LoadStatus[LoadStatus[\"Loading\"] = 0] = \"Loading\";\n  LoadStatus[LoadStatus[\"Loaded\"] = 1] = \"Loaded\";\n})(LoadStatus || (LoadStatus = {}));\n\nclass Canvas extends Component {\n  constructor(props) {\n    super(props);\n    this.images = null;\n    this.canvas = React.createRef();\n    this.intervalId = null;\n\n    this.imagePreLoader = (srcs, cb) => {\n      const images = srcs.map((src, index) => {\n        const img = new Image();\n        img.src = src;\n        img.onload = cb(index);\n        return img;\n      });\n      return images;\n    };\n\n    this.enableTimeout = () => {\n      this.intervalId = setInterval(() => {\n        this.setState(prevState => ({\n          renderingIndex: prevState.renderingIndex < prevState.loadStatusList.length - 1 ? prevState.renderingIndex + 1 : 0\n        }));\n      }, 60);\n    };\n\n    this.disableTimeout = () => {\n      if (this.intervalId) clearInterval(this.intervalId);\n    };\n\n    this.startHandler = () => {\n      const loadStatusList = this.state.loadStatusList;\n      const allReadyLoad = loadStatusList.every(loadStatus => loadStatus === LoadStatus.Loaded);\n\n      if (allReadyLoad) {\n        setInterval(() => {\n          this.setState(prevState => ({\n            renderingIndex: prevState.renderingIndex < prevState.loadStatusList.length - 1 ? prevState.renderingIndex + 1 : 0\n          }));\n        }, 60);\n      }\n    };\n\n    this.drawCanvas = index => {\n      if (this.images === null) return;\n      const img = this.images[index];\n      if (img === null) return;\n      const canvas = this.canvas.current;\n      if (canvas === null) return;\n      const ctx = canvas.getContext(\"2d\");\n      if (ctx === null) return;\n      const _this$props = this.props,\n            width = _this$props.width,\n            height = _this$props.height;\n      ctx.drawImage(img, 0, 0, width, height);\n    };\n\n    this.state = {\n      loadStatusList: this.props.images.map(() => LoadStatus.Loading),\n      renderingIndex: 0\n    };\n  }\n\n  componentDidMount() {\n    const images = this.props.images;\n    const srcs = images.map(image => image.src);\n    this.images = this.imagePreLoader(srcs, i => {\n      this.setState(prevState => {\n        const newLoadStatusList = prevState.loadStatusList.concat();\n        newLoadStatusList[i] = LoadStatus.Loaded; // callback\n\n        const allReadyLoad = newLoadStatusList.every(loadStatus => loadStatus === LoadStatus.Loaded);\n        if (allReadyLoad) this.props.preloadedCallback();\n        return {\n          loadStatusList: newLoadStatusList\n        };\n      });\n    });\n  }\n\n  render() {\n    const renderingIndex = this.state.renderingIndex;\n    const _this$props2 = this.props,\n          width = _this$props2.width,\n          height = _this$props2.height;\n    this.drawCanvas(renderingIndex);\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      ref: this.canvas,\n      width: width,\n      height: height,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default Canvas;","map":{"version":3,"sources":["/Volumes/ST-side-SSD/tsubasa/engineer/playground/typescript/timelapse-app/node_modules/timelapse/src/component/Canvas.tsx"],"names":["React","Component","LoadStatus","Canvas","constructor","props","images","canvas","createRef","intervalId","imagePreLoader","srcs","cb","map","src","index","img","Image","onload","enableTimeout","setInterval","setState","prevState","renderingIndex","loadStatusList","length","disableTimeout","clearInterval","startHandler","state","allReadyLoad","every","loadStatus","Loaded","drawCanvas","current","ctx","getContext","width","height","drawImage","Loading","componentDidMount","image","i","newLoadStatusList","concat","preloadedCallback","render"],"mappings":"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","sourcesContent":["import React, { Component, RefObject } from 'react';\n\ninterface ImageProps {\n  src: string,\n  alt: string\n}\n\ninterface CanvasProps {\n  width: number,\n  height: number,\n  images: ImageProps[],\n  preloadedCallback: () => void\n}\n\ninterface CanvasStatus {\n  loadStatusList: LoadStatus[],\n  renderingIndex: number\n}\n\nenum LoadStatus {\n  Loading = 0,\n  Loaded = 1\n}\n\n\nclass Canvas extends Component<CanvasProps, CanvasStatus> {\n  images: HTMLImageElement[] | null = null\n  canvas: RefObject<HTMLCanvasElement> = React.createRef()\n  intervalId: NodeJS.Timeout | null = null\n  constructor(props: CanvasProps) {\n    super(props)\n    this.state = {\n      loadStatusList: this.props.images.map(() => LoadStatus.Loading),\n      renderingIndex: 0\n    }\n  }\n\n  componentDidMount() {\n    const { images } = this.props\n    const srcs = images.map((image: any) => image.src)\n    this.images = this.imagePreLoader(srcs, (i: number) => {\n      this.setState(prevState => {\n        const newLoadStatusList = prevState.loadStatusList.concat()\n        newLoadStatusList[i] = LoadStatus.Loaded\n\n        // callback\n        const allReadyLoad = newLoadStatusList.every((loadStatus) => (loadStatus === LoadStatus.Loaded))\n        if (allReadyLoad) this.props.preloadedCallback()\n\n        return {\n          loadStatusList: newLoadStatusList\n        }\n      })\n    })\n  }\n\n  imagePreLoader = (srcs: string[], cb: any) => {\n    const images = srcs.map((src, index) => {\n      const img = new Image()\n      img.src = src\n      img.onload = cb(index)\n      return img\n    })\n    return images\n  }\n  \n  enableTimeout = () => {\n    this.intervalId = setInterval(() => {\n      this.setState(prevState => ({\n        renderingIndex: (prevState.renderingIndex < prevState.loadStatusList.length - 1) ? prevState.renderingIndex + 1 : 0\n      }))\n    }, 60)\n  }\n\n  disableTimeout = () => {\n    if (this.intervalId) clearInterval(this.intervalId)\n  }\n\n  startHandler = () => {\n    const { loadStatusList } = this.state\n    const allReadyLoad = loadStatusList.every((loadStatus) => (loadStatus === LoadStatus.Loaded))\n    if (allReadyLoad) {\n      setInterval(() => {\n        this.setState(prevState => ({\n          renderingIndex: (prevState.renderingIndex < prevState.loadStatusList.length - 1) ? prevState.renderingIndex + 1 : 0\n        }))\n      }, 60)\n    }\n  }\n\n  drawCanvas = (index: number) => {\n    if (this.images === null) return\n    const img = this.images[index]\n    if (img === null) return \n    const canvas = this.canvas.current\n    if (canvas === null) return \n    const ctx = canvas.getContext(\"2d\")\n    if (ctx === null) return\n    const { width, height } = this.props\n    ctx.drawImage(img, 0, 0, width, height)\n  }\n\n  render() {\n    const { renderingIndex } = this.state\n    const {  width, height } = this.props\n    this.drawCanvas(renderingIndex)\n    return(\n      <>\n        <div>\n          <canvas ref={this.canvas} width={width} height={height} />\n        </div>\n      </>\n    )\n  }\n}\nexport default Canvas"]},"metadata":{},"sourceType":"module"}