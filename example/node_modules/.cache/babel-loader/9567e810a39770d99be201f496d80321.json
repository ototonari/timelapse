{"ast":null,"code":"import _slicedToArray from \"/Volumes/ST-side-SSD/tsubasa/engineer/playground/typescript/timelapse-app/node_modules/timelapse/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Volumes/ST-side-SSD/tsubasa/engineer/playground/typescript/timelapse-app/node_modules/timelapse/src/component/Timelapse.tsx\";\nimport React, { useState, useEffect, Component } from 'react';\nexport const TimelapseFC = props => {\n  const _useState = useState(0),\n        _useState2 = _slicedToArray(_useState, 2),\n        hiddenIndex = _useState2[0],\n        setHiddenIndex = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        enable = _useState4[0],\n        setEnable = _useState4[1];\n\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      if (enable === false) return;\n      const length = props.images.length;\n\n      if (hiddenIndex < length - 1) {\n        setHiddenIndex(hiddenIndex + 1);\n      } else {\n        setHiddenIndex(0);\n      }\n    }, 50);\n    return () => clearInterval(intervalId);\n  });\n\n  const onClickHandler = () => setEnable(!enable);\n\n  const images = props.images.map((image, index) => React.createElement(\"img\", Object.assign({\n    id: \"slideImage\",\n    className: index >= hiddenIndex ? \"visibleImage\" : \"hiddenImage\",\n    key: index\n  }, image, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }))).reverse();\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    id: \"controllContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, hiddenIndex, React.createElement(\"button\", {\n    onClick: onClickHandler,\n    type: \"button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, enable ? \"Stop\" : \"Start\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, enable ? images : null));\n};\nexport class Timelapse extends Component {\n  constructor(props) {\n    super(props);\n    this.canvasRef = React.createRef();\n    const images = this.props.images;\n    const img = new Image();\n\n    const drow = () => {\n      const node = this.canvasRef.current;\n\n      if (node) {}\n    };\n\n    img.addEventListener(\"load\", drow, false);\n    img.src = images[0].src;\n  }\n\n  render() {\n    return React.createElement(\"canvas\", {\n      ref: this.canvasRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    });\n  }\n\n} // export class Timelapse extends Component<TimelapseProps, TimelapseState> {\n//   constructor(props: TimelapseProps) {\n//     super(props)\n//     this.state = {\n//       showImageIndex: 0,\n//       enable: false,\n//     }\n//   }\n//   intervalId: NodeJS.Timeout | null = null\n//   rollIndex = () => {\n//     this.setState(prevState => {\n//       const newIndex = (prevState.showImageIndex < this.props.images.length - 1) ? prevState.showImageIndex + 1 : 0\n//       return { showImageIndex: newIndex }\n//     })\n//   }\n//   enableSwitch = ()  => {\n//     this.setState(prevState => ({ enable: !prevState.enable}))\n//   }\n//   componentDidMount = () => {\n//     this.intervalId = setInterval(() => {\n//       if (this.state.enable) this.rollIndex()\n//     }, 10)\n//   }\n//   componentWillUnmount = () => {\n//     if (this.intervalId) clearInterval(this.intervalId)\n//   }\n//   render () {\n//     const { showImageIndex, enable } = this.state\n//     // const imgComponents = this.props.images.map((images, index) => <li style={{ position: 'absolute', top: 0, visibility: (showImageIndex < index) ? 'hidden' : 'visible'}} key={index}><img style={{ width: 600, height: 600 }} {...images} /></li> ).sort()\n//     const changeStyle = (hiddenIndex: number) => {\n//       return this.props.images.map((images, index) => \n//         <li style={{ visibility: (hiddenIndex >= index) ? 'visible' : 'hidden', position: 'absolute', top: 0, }} key={index}>\n//           <img style={{  }} {...images} />\n//         </li> ).sort()\n//     }\n//     const imageBox = () => (\n//       <ul style={{ position: 'absolute' }}>\n//         { changeStyle(showImageIndex) }\n//       </ul>\n//     )\n//     return (\n//       <div>\n//         <button type=\"button\" onClick={this.enableSwitch} >Start</button>\n//         { (enable) ? imageBox() : null }\n//       </div>\n//     )\n//   }\n// }","map":{"version":3,"sources":["/Volumes/ST-side-SSD/tsubasa/engineer/playground/typescript/timelapse-app/node_modules/timelapse/src/component/Timelapse.tsx"],"names":["React","useState","useEffect","Component","TimelapseFC","props","hiddenIndex","setHiddenIndex","enable","setEnable","intervalId","setInterval","length","images","clearInterval","onClickHandler","map","image","index","reverse","Timelapse","constructor","canvasRef","createRef","img","Image","drow","node","current","addEventListener","src","render"],"mappings":"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","sourcesContent":["import React, { FC, useState, useEffect, Component, RefObject } from 'react';\n\nexport interface Image {\n  src: string,\n  alt: string\n}\n\ninterface TimelapseProps {\n  images: Image[]\n}\n\ninterface TimelapseState {\n  showImageIndex: number,\n  enable: boolean,\n}\n\nexport const TimelapseFC: FC<TimelapseProps> = (props: TimelapseProps) => {\n  const [hiddenIndex, setHiddenIndex] = useState(0)\n  const [enable, setEnable] = useState(false)\n  useEffect(() => {\n    const intervalId: NodeJS.Timeout = setInterval(() => {\n      if (enable === false) return\n\n      const { length } = props.images\n      if (hiddenIndex < length - 1) {\n        setHiddenIndex(hiddenIndex + 1)\n      }\n      else {\n        setHiddenIndex(0)\n      }\n    }, 50)\n\n    return () => clearInterval(intervalId)\n  })\n  const onClickHandler = () => setEnable(!enable)\n  const images = props.images.map((image, index) => <img id=\"slideImage\" className={(index >= hiddenIndex) ? \"visibleImage\" : \"hiddenImage\"} key={index} {...image} /> ).reverse()\n  return (\n    <>\n      <div id=\"controllContainer\" >\n        { hiddenIndex }\n        <button onClick={onClickHandler} type=\"button\" >{(enable) ? \"Stop\" : \"Start\"}</button>\n      </div>\n      <div >\n        {(enable) ? images : null }\n      </div>\n    </>\n  )\n}\n\nexport class Timelapse extends Component<TimelapseProps> {\n  constructor(props: TimelapseProps) {\n    super(props)\n    const { images } = this.props\n    const img = new Image()\n    const drow = () => {\n      const node = this.canvasRef.current;\n      if (node) {\n        \n      }\n    }\n    img.addEventListener(\"load\", drow, false);\n    img.src = images[0].src\n  }\n  canvasRef: RefObject<HTMLCanvasElement> = React.createRef()\n  render () {\n    return (\n      <canvas ref={this.canvasRef} />\n    )\n  }\n}\n\n\n\n// export class Timelapse extends Component<TimelapseProps, TimelapseState> {\n//   constructor(props: TimelapseProps) {\n//     super(props)\n//     this.state = {\n//       showImageIndex: 0,\n//       enable: false,\n//     }\n//   }\n\n//   intervalId: NodeJS.Timeout | null = null\n\n//   rollIndex = () => {\n//     this.setState(prevState => {\n//       const newIndex = (prevState.showImageIndex < this.props.images.length - 1) ? prevState.showImageIndex + 1 : 0\n//       return { showImageIndex: newIndex }\n//     })\n//   }\n\n//   enableSwitch = ()  => {\n//     this.setState(prevState => ({ enable: !prevState.enable}))\n//   }\n//   componentDidMount = () => {\n//     this.intervalId = setInterval(() => {\n//       if (this.state.enable) this.rollIndex()\n//     }, 10)\n//   }\n\n//   componentWillUnmount = () => {\n//     if (this.intervalId) clearInterval(this.intervalId)\n//   }\n\n//   render () {\n//     const { showImageIndex, enable } = this.state\n//     // const imgComponents = this.props.images.map((images, index) => <li style={{ position: 'absolute', top: 0, visibility: (showImageIndex < index) ? 'hidden' : 'visible'}} key={index}><img style={{ width: 600, height: 600 }} {...images} /></li> ).sort()\n//     const changeStyle = (hiddenIndex: number) => {\n//       return this.props.images.map((images, index) => \n//         <li style={{ visibility: (hiddenIndex >= index) ? 'visible' : 'hidden', position: 'absolute', top: 0, }} key={index}>\n//           <img style={{  }} {...images} />\n//         </li> ).sort()\n//     }\n//     const imageBox = () => (\n//       <ul style={{ position: 'absolute' }}>\n//         { changeStyle(showImageIndex) }\n//       </ul>\n//     )\n//     return (\n//       <div>\n//         <button type=\"button\" onClick={this.enableSwitch} >Start</button>\n//         { (enable) ? imageBox() : null }\n//       </div>\n//     )\n//   }\n// }\n\n"]},"metadata":{},"sourceType":"module"}